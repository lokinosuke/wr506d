"use strict";
const adapter_1 = require('./adapter');
class Client extends adapter_1.Adapter {
    constructor(client, done) {
        super();
        this.client = client;
        this.done = done;
    }
    get pooled() {
        return !!this.done;
    }
    /**
     * End connection
     */
    end() {
        this.done ? this.done() : this.client.end();
    }
    /**
     * Run query and return raw result set
     */
    run(text, values) {
        let query = typeof (text) === 'string' ? { text: text, values } : text;
        return new Promise((resolve, reject) => {
            this.client.query(query, (err, res) => {
                if (err) {
                    Object.assign(err, { query: { text: query.text, values: query.values } });
                    reject(err);
                }
                else {
                    resolve(res);
                }
            });
        });
    }
    /**
     * Prepare a query
     */
    prepare(text) {
        let name = Date.now() + '-' + Math.random();
        return {
            run: (values) => this.run({ name, text, values }),
            all: (values) => this.all({ name, text, values }),
            one: (values) => this.one({ name, text, values })
        };
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map